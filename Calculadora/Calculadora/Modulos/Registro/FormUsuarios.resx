<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZuUKDXjxEw5/8BIAceIJAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAP8BDX3xSQ2B8ZsOhvHRDofy9A+K8/8Pi/T/D4v0/w+K8/8OifP1Dofy2gtv
        2LQAAE+RAABOUQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAHXrDQ2C8cAPifP/EJH1/xGX9/8Rm/j/Ep35/xKe+f8Sn/n/Ep75/xKd
        +f8Rm/j/DXvZ/wICSf8ICE3/Clq83g2B73QAc/8LAAAAAC8fDyBdSz2OUT8xxUIwI9k0IBTRQCwfqzkn
        GFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMf+92D4rz/xGV9/8Snvn/E6T7/xOo/P8Uqv3/FKv9/xSr
        /f8Uq/3/FKr9/xOp/P8Ohdz/BARC/w0NSf8NaL7/D470/w6F8eYNfe5NKBcNqzIjGP8sHRP/KRkP/y0d
        Ev9KOCz/PCod+zMZER4AAAAAAAAAAAAAAAAAAAAAAAAAAAyC8o0QkPX/Ep75/xOm/P8UrP3/FK/+/xWw
        /v8VsP//FbL+/xe1/v8Xtv7/FrP+/w6L3v8FBTv/ERFF/w+B0f8Snfn/EJP2/w6H8v0Qc9RfHA8HZBQL
        BsoSCgb/Fg4J/ygaE9AxHhGFMh4RdTwqIGUAAAAAAAAAAAAAAAAAAAAADYLxhxCZ9v8Sp/r/FKv9/xay
        +/8Vs/v/FbL7/xWy+/8Usfv/E637/xOt+/8UsPv/Do3c/wcHNP8UFkL/FKjx/xSp+/8Snfn/EJP1/xGA
        2ukyHxLANCAR60UqFP9YNhb/aEAX/3lKGf+KVBr/PywjygAAAAAAAAAAAAAAAAAAAAANgvFzEKD2/xOx
        +f8Urvr/FLD+/xWx//8Vsf//FbH//xWx//8Vsf//FbH//xWx//8OkOT/CQkw/xY2ZP8VsP7/FK37/xSo
        +P8Rn/b/IpHb/8BzH//NeyD/znwh/858If/OfCH/znwh/858If9DLyLNAAAAAAAAAAAAAAAAAAAAAAyB
        7k8Qo/X/Erf6/xSt/f8VsP7/FbH//xWx//8Vsf//FbH//xWx//8UsP7/FLD+/w+V6v8LCzH/FmKb/xWx
        //8Urv7/E6X7/xGk9/8smdT/znwh/858If/OfCH/znwh/858If/OfCH/znwh/0UwIflKNim6Mh8SOAAA
        AAAAAAAAC3/zFg+c9P0RvPr/E7L8/xSv/v8VsP//FbH//xWx//8Vsf//FbH//xWu+v8hy/z/DIbb/wQE
        K/8Pd7n/FbH//xSu/v8Tpfv/Ean4/z2Xwf/OfCH/znwh/858If/OfCH/znwh/858If/OfCH/SjQl/0Uy
        Jf83JBiKAAAAAAAAAAAAAAAADZP0vBDB+v8Svvz/FKv9/xSw/v8Vsf//FbH//xWx//8TqPr/Grn7/xWy
        /v8Pbaf/Dg40/xVqmv8WtP7/FKz9/xKi+v8Qsfn/XI+e/858If/OfCH/znwh/858If/OfCH/znwh/9CC
        K/9KMiL2Mh8SqDMeEpYzIBO0Szs2LwAAAAAMgfI/D7T3/hHM+/8TrPv/FKz9/xSw/v8VsP//FLD+/xiw
        9f8SrPr/Eqz7/xOn8P8QMl3/FqPh/xez/f8Tpvz/EZv4/w+7+P+Qf2P/znwh/85+JP/Qgyz/04k1/9WP
        P//Ylkn/2JZK/1o9Jf+OVhv/n2Ac/3NGGf9NPTZPAAAAAAAAAAAMj/KLD8j6/xHG+/8To/v/FKr9/xSu
        /v8UqPf/E6/1/xCl8/8hidv/M3jM/zFxxP8Wmen/Fav7/xKd+f8Qn/f/Kqrg/9WYUf/amlD/2ppQ/9mY
        Tf/Ylkr/15RH/9aSQ//WkED/ZkQm/858If/OfCH/h1Ia/047OFEAAAAAAAAAAAAA/wENlvOGD8v5/RG2
        +v8SoPr/E6b7/xKi7/8Onez/MXnN/1CG2v9XjuP/TIHW/yaA0f8SnPf/EJD1/w6d5v+okm//2ZhN/9iW
        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
        D//4AA///AAP//wAP//+AH///4P///////8=
</value>
  </data>
</root>