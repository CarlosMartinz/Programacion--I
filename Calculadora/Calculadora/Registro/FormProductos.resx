<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAACAAAABAAAAAcAAAAMAAAAEQAAAA0AAAAEAAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAQAAAAIAAAAEAAAACAAAABQAAAA4HCkydTRPXLA8XG7iKj9MwgAAADIAAAASAAAACAAA
        AAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAADAAAABQAAAAgAAAAQAAAAKxYlLWY5VmalQGFz3EFic/tRfJP/ZJy8/yEzPf0eLzn5EhwiqgAA
        ADsAAAAcAAAADQAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
        AAQAAAAIAAAAEgAAACoPGh9gL0xbnDlcbtRAZHb5RWd6/jROXP8lOEL8Hi43+Upyift0tNb/U3+Y/jZS
        Yf4iN0T9ChEWkwAAADYAAAAdAAAADQAAAAQAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAADAAAABQAA
        AAsAAAAeDBIYUzBLWZI6WWnNUX6Y9kBjd/4oQE3/IDI9/B0tOPojOET5LkZS+Utyhfxejqb+Zpq0/16M
        pf9KcIf/SW+M/h8xPfomOkb3CxEVgQAAADIAAAAaAAAACwAAAAMAAAAAAAAAAgAAAAcAAAAOAAAAHAYN
        DUotRVKIP2BxxEBhc/JCZnr+NE9e/yEzPf1zs9j+SXGH/yU7SPs9Ynb8W4yl/mKVrv9fjqb/SW6E/z5e
        dv8+X3v/Q2eI/013nf9ekb7/QGSE/yAxPPshND7pBAcJbQAAAC0AAAAXAAAACgAAAAEAAAAKJj5Ldzpc
        bbw6WmvtPl5v/jZSYf8nO0f9IDI8+SU6RfksQ1D5Q2l++3m83f5jm7f/VYWg/0JogP87XHX/PF15/0Vq
        jP9OeZ//VoWu/1uMuP9djbj/d5y7/3io0f9AZYb/OVlz/x4tN/0bKjPdAAAAXAAAACsAAAAVAAAABAAA
        AAkzU2abY5m4/k12jf8gMj38IzdC+kVpfPtcjaX+XZCr/1iIov9HbYX/P2B5/zRRav9CZ4f/S3Wa/1OB
        qv9YiLL/XZC8/1+TwP9hlsT/c6PN/6Wwt/+KorX/e6zW/0FmiP8/ZIT/OVhy/iU4Q/8XJCzPAAAATQAA
        ACYAAAAKAAAABB0rOiN0tNfhZ566/2GUr/9aiaH/R2yD/z5fef8/YoD/R22Q/0t0mP9ZirT/R2+T/1aG
        sP9bjrv/X5PA/2GWxP9jmMf/ZpzL/2edzf9ons7/bKLR/2ih0v9qo9b/Q2qM/0Bkhf8+YH//K0NW/CU4
        Q/0XIyq8AAAAQQAAABIVP1UMUoWg3kNpgv89Xnj/PmB9/0dukf9Qe6L/V4aw/1yOuv9pl8D/e5q0/3ei
        x/9Sf6j/X5PC/2GWxf9imMj/ZZvL/2aczf9poND/aqHS/2mh0v9oodP/aqLU/2ul2P9CaIn/PmKC/z5i
        gv8yTmj/LUdb/SA0PvoSHiWXAAAAFwAAAABFbI/DS3Wa/1OBqv9airX/XpC9/2CUwv9il8X/Y5nJ/6G0
        xP9/n7r/bp/K/1eGsf9il8f/XpHA/1qNuf9dkL3/XpG+/2aczf9potP/aqPU/2uk1v9rpdf/a6XZ/0ly
        lv88X37/QWaH/zZUb/8/Y4P/KEBS1BcmL1YAAAAJAAAAAFSCrdFcj7z/XpLA/2GWxP9jmcj/ZZvL/2ie
        zv9mns7/Z5/Q/2ig0v9jmcj/UHyl/1F+p/9WhrH/UoG5/1WGwv9ooNL/aqLU/2qj1f9rpNb/bKXY/2ym
        2f9tqNv/TXme/0Jpiv9BZob/NVRu/z9jhP8/Y4P4K0ZdTAAAAAMAAAAAWYu34WGWxf9il8f/ZJvL/2ad
        zf9nntD/aqHS/2mh0v9oodL/aaLU/2OZyP9Rf7b/SHXC/059xv9GcsT/XJDO/2mi1P9qo9b/a6XY/2ym
        2f9sp9r/bqnc/22o3f9Oe6D/Q2qL/0Fmhv81U27/P2OE/0FniP81U2/hAAAAAAAAAABWh7PvW426/1WE
        rv9Ugqz/XpK//2GWxf9potP/aqLU/2qj1v9qpNf/YZbF/099uv9Hc8P/Q27C/0h1xv9gltH/a6TX/2ul
        2P9sp9r/aaHR/2GUwf9fkr7/XpC8/z9kg/9DaYz/QWWG/zVTbf89YYH/QGWF/zdZdvYAAAAAAAAAA1WF
        s/tRf7b/U4LC/0t5xf9dkc7/aaHT/2qj1f9po9X/aqTW/2ul1/9glMH/UH++/0l3xf9Vhsv/WYzL/1uN
        vP9dj7v/W4y3/1mIsv9ej7v/YpbF/1yOuv9gk8L/R2+R/zZWc/9AZIb/NVNu/0Blhv8/ZIT/PmKB/gAA
        AAkRESIPT37D/0Zzwv9DbsL/XJDO/2mi1P9po9b/aqTW/2qk1v9potT/Z57P/1WDq/9XhrD/WIiz/1iH
        sf9Yh7D/YJTB/2GWxP9jl8b/Y5nI/2Wayf9Ugqv/T3qh/2GVw/9KdJj/OVl3/zVTbv82VnH/RGuN/0Fo
        if8/ZIT/CyEsFypEXR5Mesb/Q2/D/0x7x/9Qgcv/a6XY/2Wdzf9il8X/X5PA/16Rvv9dj7v/Woq0/1iI
        s/9ZibP/Un+m/1uMt/9glMH/Y5jH/2Sayv9lm8v/Z53N/2adzv9ooNH/aaHS/0x2m/8/Y4P/P2KB/y1H
        X/9CaIr/Q2mK/0Bkhf8gNEcnPmaILV6SzP9ajMH/YZXC/16Rvv9bjLj/XpC+/2GVxP9jmMj/WYq2/1uM
        uf9ai7b/V4ex/1iIs/9bjLf/YZXD/2KYx/9jmcn/ZpzM/2edzv9on8//aaDR/2qh0/9qotT/Tnmf/z1h
        gf8/Y4P/Lklh/zZWdP9CaIr/QGSE/yZDVjU8YYE3VIOs/1uOuv9bjbn/X5K//2CUwf9imMf/ZJrJ/2+h
        zv+JpLv/prO9/2mVu/9ZibT/Woq1/1mJtf9dkL3/Y5nJ/2Wczf9nns//aKDR/2qh0/9podP/a6TV/2yk
        1v9Md53/PmKC/0Fmh/82VXD/P2OD/zRTb/8/ZIT/LEljRUZtlEhWhrH/XpLB/2CVxP9il8b/Y5nI/2Wb
        yv9mnMz/c6XR/4aqyf9ypNH/XY+7/1qLt/9ekr//bpvC/2aczP9mnc7/aJ/Q/2ig0v9podP/aqLU/2uk
        1v9spdf/bafZ/1B8o/86XHv/QGaH/ztde/9AZYb/O1x6/zRRa/8xT2hTTXmgVl+Uw/9glcT/YpfH/2Sa
        yv9lm8z/aJ7O/2mf0P9nn9D/Z5/R/2mh0/9dj7v/hK3R/5ikrf+1vL//c6bS/2ig0f9ooNL/aaLU/2mi
        1P9qpNb/a6XX/22m2f9uqNv/U4Kr/0Npi/9BZof/PF9+/z9igv9BZob/PF17/yM8UUhQfadmYpfH/2KY
        yP9flML/X5PB/2Sayv9nnc3/aaHS/2mh0/9potT/aqTW/1+Svv+Qttb/vsbK/+Ll5/94qtb/aaLT/2mi
        1P9qo9b/aqTW/2uk1v9nns//ZJrO/2Wc0/9Ug6z/Q2qM/0Fmh/89YID/PmGB/z1hgP87XXv/K0JZTVF/
        q3RRfqb/UX2l/1eHsv9Whrr/YZXE/2if0P9qotT/aqTV/2uk1/9sptj/X5PA/3qo0P+au9f/gq3T/2mi
        0/9potT/ZJzU/1qNyv9ThMX/VYfK/12S1P9gltb/aaPd/1eHsv9Ea43/P2SG/z5igf86XHv/P2SF/0Fm
        h/8yUW1bU4OxhEx6wP9MesT/SXbE/1GByP9podP/aaLV/2qk1v9qpNb/bKbY/22n2v9glMH/WIi0/1OB
        q/9VhK3/aaLU/2ul1/9gltT/aaLY/2ih0/9knM3/YJfG/1yRv/9ZjLj/WIq3/0t2nf9CZoj/PmOC/0Bl
        hv8+YoL/QWaG/zRTcGtMerOSRG/B/0d0w/9HdMT/ZJzS/2qj1f9qpNf/a6bY/22n2v9tqNv/b6vf/2KY
        xf9lnc7/ZJ3P/2Oby/9flcX/XZPB/1iMuf9Xibb/WIq2/1iKtv9Xibb/VYe0/1KDsv9QgLD/UoKx/056
        o/8/Y4P/QWaI/0Npi/9AZYb/NFRxeU58uKJHc8T/T3/I/018yP9imdT/bqnb/2ul1v9nn8//ZJvK/1+V
        wv9Zi7f/VYWv/1KAqv9Vh7P/Voi1/1aItP9VhrP/VIWz/1WGs/9Wh7T/WIi1/1OEsv9Sg7H/VIWy/1WH
        sv9Vh7P/VYay/058pf9GbZH/Q2qM/0Fmhv81VXGJXI+9q2afz/9km8r/YJbE/1yRvv9Yirb/V4q2/1eJ
        tf9XibX/V4i1/1WGs/9SgrD/UYCt/057pP9Rf6r/U4Sx/1SFsv9VhrP/Voez/1WHsv9Vh7L/VIWw/1B+
        p/9Rf6j/UX+o/1KAqf9Tgqv/VYSu/1WFsf9GbpP/QGSG/zdWcpcVP1UMSXaeeVKDru1UhrP/UYOx/1CB
        sP9RgbD/VIWz/1eHtP9VhrP/VYaz/1WGsv9UhbD/UoGs/0hymP9AZof/SXSZ/0lyl/9KdZv/THif/098
        pP9SgKn/WIq2/1eKtv9XibX/V4m1/1eItf9VhrP/VIWy/1SEsf9EbJH/Nlh1pwAAAAAAAAAAIkRVD0Zw
        mn9QgKzwVoez/1aHs/9VhrH/UH6n/015n/9Md57/S3ac/0l0mf9KdJr/T3yk/1eHsv9Qfab/Tnyl/1eJ
        tf9WiLT/VIaz/1KDsf9Sg7H/Voaz/1eItP9VhrP/VIWy/1SFsv9Vh7L/VYay/1ODr/4+ZISoAAAAAAAA
        AAAAAAAAAAAAACpGYxJHcZezUYCp/1GAqf9VhbD/V4q3/1eJtv9XibX/V4m1/1aHtP9VhrP/U4Sx/1KC
        r/9Sga3/THmj/09+q/9ThLH/VYez/1aItP9Vh7L+UH+o8E98pctNeqKlSXWdgEZuk1o5W301Dx8vEAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBZ4lKTnymzVKCsf9QgbD/UIGw/1OEsf9Xh7T/Voez/1aI
        s/9UhrH+T36n7k17o8lLeJ+jQ2yQfUlzm3lIcpZiPmSFPSE3TRcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQ2uQU099pdBQfqbSTnukrEt3
        nodGcZVhPGOBOxgwSBUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///AP//8AA//wAAD/gAAAcAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAIAA
        AACAAAAAgAAAAYAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMAAAADwAAAB/AAA//4A//8=
</value>
  </data>
</root>